#upstream myapp {
#  server unix:///home/ubuntu/www/rails/sflxActive/tmp/puma/state;
#}

server {
      listen      80 default;
      server_name sflx.com.cn www.sflx.com.cn;
      access_log off;
      error_log off;
      ## redirect http to https ##
      # return      301 https://$server_name$request_uri;
      return      301 https://www.sflx.com.cn$request_uri;
}

server {
  listen 443;
  server_name sflx.com.cn;
  ssl on;
  ssl_certificate /etc/nginx/conf.d/1_sflx.com.cn_bundle.crt;
  ssl_certificate_key /etc/nginx/conf.d/2_sflx.com.cn.key;
  ssl_session_timeout 5m;
  ssl_protocols TLSv1 TLSv1.1 TLSv1.2; #按照这个协议配置
  ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;#按照这个套件配置
  ssl_prefer_server_ciphers on;
  return      301 https://www.sflx.com.cn$request_uri;
}

server {
  listen 443;
  server_name www.sflx.com.cn;
  ssl on;
  ssl_certificate /etc/nginx/conf.d/1_sflx.com.cn_bundle.crt;
  ssl_certificate_key /etc/nginx/conf.d/2_sflx.com.cn.key;
  ssl_session_timeout 5m;
  ssl_protocols TLSv1 TLSv1.1 TLSv1.2; #按照这个协议配置
  ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;#按照这个套件配置
  ssl_prefer_server_ciphers on;

  # ~2 seconds is often enough for most folks to parse HTML/CSS and
  # retrieve needed images/icons/frames, connections are cheap in
  # nginx so increasing this is generally safe...
  keepalive_timeout 30;

  # path for static files
  root /var/www/rails/sflx_admin/current/public;
  access_log /var/www/rails/sflx_admin/current/log/production.access.log;
  error_log /var/www/rails/sflx_admin/current/log/production.error.log info;

  # this rewrites all the requests to the maintenance.html
  # page if it exists in the doc root. This is for capistrano's
  # disable web task
  if (-f $document_root/maintenance.html) {
    rewrite  ^(.*)$  /maintenance.html last;
    break;
  }

  location / {
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $http_host;
    # setting header for request.origin match request.base_url
    proxy_set_header  X-Forwarded-Proto $scheme;
    proxy_set_header  X-Forwarded-Ssl on; # Optional
    proxy_set_header  X-Forwarded-Port $server_port;
    proxy_set_header  X-Forwarded-Host $host;

    # If the file exists as a static file serve it directly without
    # running all the other rewite tests on it
    if (-f $request_filename) {
      break;
    }

    # check for index.html for directory index
    # if its there on the filesystem then rewite
    # the url to add /index.html to the end of it
    # and then break to send it to the next config rules.
    if (-f $request_filename/index.html) {
      rewrite (.*) $1/index.html break;
    }

    # this is the meat of the rack page caching config
    # it adds .html to the end of the url and then checks
    # the filesystem for that file. If it exists, then we
    # rewite the url to have explicit .html on the end
    # and then send it on its way to the next config rule.
    # if there is no file on the fs then it sets all the
    # necessary headers and proxies to our upstream mongrels
    if (-f $request_filename.html) {
      rewrite (.*) $1.html break;
    }

    if (!-f $request_filename) {
      proxy_pass http://0.0.0.0:9292;
      break;
    }
  }

  location ~ ^/rails/active_storage/ {
    proxy_pass http://0.0.0.0:9292;
    break;
  }

  # Now this supposedly should work as it gets the filenames with querystrings that Rails provides.
  # BUT there's a chance it could break the ajax calls.
  location ~* \.(ico|css|gif|jpe?g|png|svg)(\?[0-9]+)?$ {
     expires max;
     break;
  }

  location ~ ^/javascripts/.*\.js(\?[0-9]+)?$ {
     expires max;
     break;
  }

  location ~ ^/assets/ {
    # gzip on; #not work
    gzip_static on; #include js/css/svg
    expires 1y;
    add_header Cache-Control public;
    add_header  Last-Modified "";
    add_header ETag "";
  }

  # Error pages
  # error_page 500 502 503 504 /500.html;
  location = /500.html {
    # root /home/ubuntu/www/rails/sflxActive/public;
  }
}
